export const chainlinkExecutedJs =
  '// This example shows how to obtain the final results of snapshot.org off-chain vote outcome\nconst proposalId = args[0]\n\n// Use snapshot\'s graphql API to get the final vote outcome\nconst snapshotRequest = () => Functions.makeHttpRequest({\n  url: `https://testnet.snapshot.org/graphql`, //`https://hub.snapshot.org/graphql`,\n  method: "POST",\n  data: {\n    query: `{\n      proposal(id: "${proposalId}") {\n        choices\n        plugins\n        quorum\n        scores\n        scores_state\n        scores_total\n      }\n    }`,\n  },\n})\n\nconst { data, error } = await snapshotRequest()\n\nif (error) {\n  throw Error("Snapshot request failed")\n}\n\nconst { proposal } = data.data\nconst { choices, plugins, quorum, scores, scores_state, scores_total } = proposal\n\nif (scores_state !== "final") {\n  throw Error("Snapshot vote is not final")\n}\n\nif (scores_total < quorum) {\n  throw Error("Snapshot vote quorum not reached")\n}\n\nconst executableIf = plugins?.safeSnap?.executableIf\nconst winningChoice = choices[scores.indexOf(Math.max(...scores))]\n\nconst shouldExecute = executableIf === winningChoice\n\nif (!shouldExecute) {\n  return Error("Snpashot vote outcome should not execute")\n}\n\n// const hash = plugins?.safeSnap?.safes[0]?.txs[0].hash\nconst txString = plugins?.safeSnap?.txString\n// hex string without prefix\nconst hexStringWithoutPrefix = txString.slice(2);\n// convert the hex string to a buffer representing on-chain bytes\nconst convertedHexStringToBytesBuffer = Buffer.from(hexStringWithoutPrefix, \'hex\');\n// return the buffer\nreturn convertedHexStringToBytesBuffer;';
export default chainlinkExecutedJs;
